module nat

import public bool
import public pair

%default total

data nat = O | S nat

||| returns true if the argument is (represents) zero, otherwise false
isZero: nat -> bool
isZero O = true
isZero (S_) = false

||| returns the successor of any given nat
succ: nat -> nat
succ n = S n

||| returns the predecessor of any given nat
pred: nat -> nat
pred O = O
pred (S n) = n

||| return true if the argument is even otherwise false
evenb: nat -> bool
evenb O = true
evenb (S O) = false
evenb(S(S n)) = evenb n

--Further code made before learning pattern matching.

-- NOTE: Original post edited to remove %default total. You *will* get warnings about totality. Proceed anyway.

{- We now introduce a type to represent the natural numbers using
Peano arithmetic.

In this arithmetic, there are two especially important rules
- zero is a natural number
- the successor of any natural number is a natural number

From this pair of rules arises an infinity of natural numbers. Zero is
a natural number, and the successor of any natural number is a natural
number, so the successor of zero is a natural number; and now, because
the successor of zero is a natural number, its successor, i.e., the
successor of (the successor of zero) is one too; ad infinitum! 

HOMEWORK #1: Learn this way of thinking by rehearsing it mentally
until you've really got it. Work with friends. Explain it to each
other. Test each other. -}

{- We capture this idea with the following deceptively simple data
type definition. What it says is that nat is a type, and there are two
ways to construct a nat. One is to use the constructor, O. The other
is to apply the constructor S to a value that is already known to be
of type nat.  Because O is already known to be of type nat, you can
thus apply S to O (yielding the term (S O)) and the result is also of
type nat. And now because it is a value of type nat, you can apply S
to it to get another value of type nat. Ad infinitum. 

HOMEWORK #2: Study and think about this example as many times as
necessary to get it. Work with friends. Teach each other. Test each
other.  -}

-- Here's our data type definition.

||| A data type to represent the natural numbers.  We use a lower case
||| "n" in the name to distinguish our nat type from Idris's Nat type
data nat = O | S nat

-- HOMEWORK #3: In the REPL ask what are the types of nat, O and S.
-- Be sure you understand the answers! Teach, learning from and test
-- friends.

{-
Here are some examples of some objects (named values) of type nat.
-}

-- moved to nattest.idr

-- HOMEWORK #6: In the REPL, evaluate the types and values of z, o, t
-- and r, as well as your own values. (E.g., ":t o" will report the
-- type of o, and "o" will report its value (along with its type). Be
-- sure you understand the answers. In particular be sure you
-- understand how the variable expression, "r" is evaluated! Yup: r is
-- unfolded to S t; t is unfolded to S (S O); so the whole expression 
-- unfolds to S (S (S O)). Be able to explain this evaluation process
-- verbally and in writing. Teach and test each other.

{-
The rest of this file contains functions operating on nats.
-}

||| returns true if the argument is (represents) zero, otherwise false
isZero: nat -> bool
isZero O = true
isZero _ = false

-- HOMEWORK #7 Bind x to the result of applying isZero to r. Moved to nattest.idr

||| returns the successor of any given nat
succ: nat -> nat
succ n = S n

-- HOMEWORK #8 Bind y to the result of applying succ to O. Add code here.
-- moved to nattest.dr

||| returns the predecessor of any given nat
pred: nat -> nat
pred O = O
pred (S n) = n

{- Next we define a function that when given a natural number returns
true if it's even and false otherwise. It is very, very important to
understand this example, your first example of a recursive function -}

||| return true if the argument is even otherwise false
evenb: nat -> bool
evenb O = true
evenb (S O) = false
evenb (S (S n)) = evenb n

-- odd numbers
oddb: nat -> bool
oddb n = not (evenb n)

-- HOMEWORK #9 Bind a, b, c, d, e respectively to the results of
-- applying evenb to O, (S O), (S (S O)) r, and (S r),
-- respectively. Add your code here.
-- moved to nattest.idr

--HOMEWORK #10 In English, describe all of the steps involved in
--evaluating the function application expression, evenb (S r). You
--must be able to explain this process to yourself and your friends!
--The idea is that you keep on applying reduction (simplification)
--rules until you get to a value that cannot be reduced further. Write
--your answer by filling in the following block comment.

{-
The r in this function unfolds to (S t) which unfolds to S (S (S

O)). Since our input is (S r) it is one value higher than (S r). Thus,

it is four, or S(S(S(S O))). Since this is an even number, it should

return true.
-}

-- HOMEWORK #11 Here's a function that takes a pair of natural numbers
-- (values of type nat) and that returns their sum (as another value
-- of type nat). We give you the function name and type along with the
-- left hand sides of the two rules that you'll need. We've filled in 
-- the right hand sides with placeholders. Your task is to replace the
-- right hand sides of the two rules. 

-- Here are a few examples of how this function should work, to get
-- you going. We use ==> to mean "reduces to" or "returns"

-- addp (mkPair O O) ==> O
-- addp (mkPair O (S (S O))) ==> S (S O)
-- addp (mkPair (S O) O) ==> S O
-- addp (mkPair (S (S O)) (S (S (S O)))) ==> S (S (S (S (S O))))

-- Completing the first rule should be pretty easy. Just think about
-- the most basic properties of arithmetic. The second rule is more
-- challenging. Go back and study the evenb example. Notice how we
-- used evenb within its own definition! The idea is that we can
-- compute evenb for a big number by returning the result that we get
-- when we apply it to a number that is two less than the number that
-- we started with. You're going to use a similar idea here.

-- This is the hardest but also the most important problem in this
  -- problem set. There is *no grading penalty* for not getting an
  -- answer to this problem. There is no grading reward for getting
  -- it. Really: do *not* collaborate on this problem. It will help
  -- us instructors to see how you do.
  
||| given a pair of natural numbers, return its sum
-- I'm sorry, I cannot get this to work out. I cannot for the life of
-- me think of any mechanism to get it to work. I have tried to
-- replace the "O" of one with the full value of the other, but
-- could not figure that out. Also, I tried changing "m" and "n"
-- to functions but that does not work as well.

--I have gotten it to work now

addp: pair nat nat -> nat
addp (mkPair O m) = m
addp (mkPair (S n) m) = S (addp( mkPair n m))

-- HOMEWORK 12 -- Use the REPL to verify that these tests return the
-- expected results

-- moved to nattest.idr

-- HOMEWORK 13 --Multiplication

-- For the Multiplication function, i have modified the format of the
-- recursive addition function. By adding m together with itself many
-- times, I have tried to use the fundamental idea of multiplication,
-- which is simply recursive addition.

||| given a pair of natural numbers, return its sum
multp: pair nat nat -> nat
multp (mkPair O m) = O
multp (mkPair (S n) m) = addp (mkPair (multp (mkPair n m)) m) 

-- HOMEWORK 14 --Factorial

--For the factorial I have simply used multiplication recursively. I
--multiply (S n) with an ever decreasing value. 
factp: nat -> nat
factp O = (S O)
factp (S n) = multp(mkPair(S n) (factp n))

fibon: nat -> nat
fibon O = O
fibon (S O) = (S O)
fibon(S(S n)) = addp (mkPair (fibon (S n)) (fibon n))


-- Subscraption (Subtraction)
-- This function only works for first >= second
-- Otherwise, it just returns O
subtr: pair nat nat -> nat
subtr (mkPair n O) = n
subtr (mkPair O n) = O
subtr (mkPair(S n) (S m)) = (subtr(mkPair n m))

exp: pair nat nat -> nat
exp (mkPair b O) = (S O)
exp (mkPair b (S O)) = b
exp (mkPair b (S e)) = multp (mkPair(exp(mkPair b e)) b)

--divs: pair nat nat -> nat
--divs (mkPair m O) = m
--divs (mkPair O n) = O
--divs (mkPair n m) = S( divs( mkPair( subtr( mkPair(n m)) m)))
 
--Less than or equal to function
lep: pair nat nat -> bool
lep (mkPair O n) = true
lep (mkPair (S n) O) = false
lep (mkPair a b) = lep (mkPair (subtr( mkPair a b)) (subtr(mkPair b a)))

--Function that checks if two values are equal
eqp: pair nat nat -> bool
eqp (mkPair O O) = true
eqp (mkPair n O) = false
eqp (mkPair O n) = false
eqp (mkPair a b) = eqp(mkPair (subtr( mkPair a b)) (subtr(mkPair b a)))

--Greater than function
gtp: pair nat nat -> bool
gtp (mkPair a b) = not( lep(mkPair a b))

--Greater than or equal to function
gep: pair nat nat -> bool
gep (mkPair O (S n)) = false
gep (mkPair n O) = true
gep (mkPair (S a) (S b)) = gep (mkPair a b)

--Less than function
ltp: pair nat nat -> bool
ltp (mkPair a b) = not( gep(mkPair a b))
